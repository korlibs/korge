package com.soywiz.kmem.pack

// @TODO: https://youtrack.jetbrains.com/issue/KT-57496/linkReleaseFrameworkIosArm64-e-Compilation-failed-An-operation-is-not-implemented.

import com.soywiz.kmem.*

// Based on https://en.wikipedia.org/wiki/Bfloat16_floating-point_format
// But occupies 21 bits. This is done to encode 6 floats in 128bits. Converting to float is just a shift.
// Can pack 3 floats in a 64-bit Long
// 21-bit: sign:1 - exp:8 - smantissa:1, mantissa:11
internal object BFloat21 {
    internal fun unpack3(v: Long, index: Int): Float = unpack((v ushr (21 * index)).toInt())
    internal fun pack3(a: Float, b: Float, c: Float): Long =
        (pack(a).toLong() shl 0) or (pack(b).toLong() shl 21) or (pack(c).toLong() shl 42)
    internal fun pack(v: Float): Int = v.toRawBits() ushr 12
    internal fun unpack(v: Int): Float = Float.fromBits(v shl 12)
}

internal object BFloat16 {
    internal fun unpack4(v: Long, index: Int): Float = unpack((v ushr (16 * index)).toInt())

    internal fun pack4(a: Float, b: Float, c: Float, d: Float): Long {
        val pack1 = (pack(a) shl 0) or (pack(b) shl 16)
        val pack2 = (pack(c) shl 0) or (pack(d) shl 16)
        return pack1.toLong() or (pack2.toLong() shl 32)
    }

    internal fun pack(v: Float): Int = v.toRawBits() ushr 17
    internal fun unpack(v: Int): Float = Float.fromBits(v shl 17)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actual typealias BFloat3Half4Pack = Vector128
// 21-bit BFloat precision
actual val BFloat3Half4Pack.b0: Float get() = BFloat21.unpack3(getLongAt(0), 0)
actual val BFloat3Half4Pack.b1: Float get() = BFloat21.unpack3(getLongAt(0), 1)
actual val BFloat3Half4Pack.b2: Float get() = BFloat21.unpack3(getLongAt(0), 2)
// 16-bit Half Float precision
actual val BFloat3Half4Pack.hf0: Float get() = BFloat16.unpack4(getLongAt(1), 0)
actual val BFloat3Half4Pack.hf1: Float get() = BFloat16.unpack4(getLongAt(1), 1)
actual val BFloat3Half4Pack.hf2: Float get() = BFloat16.unpack4(getLongAt(1), 2)
actual val BFloat3Half4Pack.hf3: Float get() = BFloat16.unpack4(getLongAt(1), 3)

actual fun bfloat3Half4PackOf(
    b0: Float, b1: Float, b2: Float,
    hf0: Float, hf1: Float, hf2: Float, hf3: Float
): BFloat3Half4Pack {
    val pack1 = BFloat21.pack3(b0, b1, b2)
    val pack2 = BFloat16.pack4(hf0, hf1, hf2, hf3)
    return vectorOf(pack1.low, pack1.high, pack2.low, pack2.high)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actual typealias BFloat6Pack = Vector128

private inline fun unpack(long: Long, index: Int): Float = BFloat.unpackLong(long, index).float

actual val BFloat6Pack.bf0: Float get() = unpack(getLongAt(0), 0)
actual val BFloat6Pack.bf1: Float get() = unpack(getLongAt(0), 1)
actual val BFloat6Pack.bf2: Float get() = unpack(getLongAt(0), 2)
actual val BFloat6Pack.bf3: Float get() = unpack(getLongAt(1), 0)
actual val BFloat6Pack.bf4: Float get() = unpack(getLongAt(1), 1)
actual val BFloat6Pack.bf5: Float get() = unpack(getLongAt(1), 2)

actual fun bfloat6PackOf(bf0: Float, bf1: Float, bf2: Float, bf3: Float, bf4: Float, bf5: Float): BFloat6Pack {
    val v0 = BFloat(bf0)
    val v1 = BFloat(bf1)
    val v2 = BFloat(bf2)
    val v3 = BFloat(bf3)
    val v4 = BFloat(bf4)
    val v5 = BFloat(bf5)
    val pack1 = BFloat.packLong(v0, v1, v2)
    val pack2 = BFloat.packLong(v3, v4, v5)
    return vectorOf(pack1.low, pack1.high, pack2.low, pack2.high)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actual typealias Float4Pack = Vector128
actual val Float4Pack.f0: Float get() = this.getFloatAt(0)
actual val Float4Pack.f1: Float get() = this.getFloatAt(1)
actual val Float4Pack.f2: Float get() = this.getFloatAt(2)
actual val Float4Pack.f3: Float get() = this.getFloatAt(3)
actual fun float4PackOf(f0: Float, f1: Float, f2: Float, f3: Float): Float4Pack = vectorOf(f0, f1, f2, f3)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actual typealias Half8Pack = Vector128
actual val Half8Pack.h0: Float get() = Half.fromBits(this.getIntAt(0).extract16(0)).toFloat()
actual val Half8Pack.h1: Float get() = Half.fromBits(this.getIntAt(0).extract16(16)).toFloat()
actual val Half8Pack.h2: Float get() = Half.fromBits(this.getIntAt(1).extract16(0)).toFloat()
actual val Half8Pack.h3: Float get() = Half.fromBits(this.getIntAt(1).extract16(16)).toFloat()
actual val Half8Pack.h4: Float get() = Half.fromBits(this.getIntAt(2).extract16(0)).toFloat()
actual val Half8Pack.h5: Float get() = Half.fromBits(this.getIntAt(2).extract16(16)).toFloat()
actual val Half8Pack.h6: Float get() = Half.fromBits(this.getIntAt(3).extract16(0)).toFloat()
actual val Half8Pack.h7: Float get() = Half.fromBits(this.getIntAt(3).extract16(16)).toFloat()
actual fun half8PackOf(h0: Float, h1: Float, h2: Float, h3: Float, h4: Float, h5: Float, h6: Float, h7: Float): Half8Pack {
    val v0 = 0.insert16(h0.toHalf().rawBits.toInt(), 0).insert16(h1.toHalf().rawBits.toInt(), 16)
    val v1 = 0.insert16(h2.toHalf().rawBits.toInt(), 0).insert16(h3.toHalf().rawBits.toInt(), 16)
    val v2 = 0.insert16(h4.toHalf().rawBits.toInt(), 0).insert16(h5.toHalf().rawBits.toInt(), 16)
    val v3 = 0.insert16(h6.toHalf().rawBits.toInt(), 0).insert16(h7.toHalf().rawBits.toInt(), 16)
    return vectorOf(v0, v1, v2, v3)
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actual typealias Int4Pack = Vector128
actual val Int4Pack.i0: Int get() = this.getIntAt(0)
actual val Int4Pack.i1: Int get() = this.getIntAt(1)
actual val Int4Pack.i2: Int get() = this.getIntAt(2)
actual val Int4Pack.i3: Int get() = this.getIntAt(3)
actual fun int4PackOf(i0: Int, i1: Int, i2: Int, i3: Int): Int4Pack = vectorOf(i0, i1, i2, i3)












internal actual inline fun packFloat2(x: Float, y: Float): Long = (x.toRawBits().toLong() and 0xFFFFFFFFL) or (y.toRawBits().toLong() shl 32)
internal actual inline fun unpackFloat2X(v: Long): Float = Float.fromBits(v.toInt())
internal actual inline fun unpackFloat2Y(v: Long): Float = Float.fromBits((v shr 32).toInt())


internal actual inline fun packInt2(x: Int, y: Int): Long = (x.toLong() and 0xFFFFFFFFL) or (y.toLong() shl 32)
internal actual inline fun unpackInt2X(v: Long): Int = v.toInt()
internal actual inline fun unpackInt2Y(v: Long): Int = (v shr 32).toInt()


internal actual inline fun packShort4(x: Short, y: Short, z: Short, w: Short): Long =
    packInt2(packShort2(x, y), packShort2(z, w))
internal actual inline fun unpackShort4X(v: Long): Short = unpackInt2X(v).toShort()
internal actual inline fun unpackShort4Y(v: Long): Short = (unpackInt2X(v) shr 16).toShort()
internal actual inline fun unpackShort4Z(v: Long): Short = unpackInt2Y(v).toShort()
internal actual inline fun unpackShort4W(v: Long): Short = (unpackInt2Y(v) shr 16).toShort()

internal fun packShort2(x: Short, y: Short): Int = (x.toInt() and 0xFFFF) or (y.toInt() shl 16)
internal fun unpackShort2X(v: Int): Short = v.toShort()
internal fun unpackShort2Y(v: Int): Short = (v shr 16).toShort()


internal fun packHalf2(x: Half, y: Half): Int = (x.rawBits.toInt() and 0xFFFF) or (y.rawBits.toInt() shl 16)

internal actual inline fun packHalf4(x: Half, y: Half, z: Half, w: Half): Long = packInt2(packHalf2(x, y), packHalf2(z, w))
internal actual inline fun unpackHalf4X(v: Long): Half = Half.fromBits(unpackInt2X(v).toShort())
internal actual inline fun unpackHalf4Y(v: Long): Half = Half.fromBits((unpackInt2X(v) shr 16).toShort())
internal actual inline fun unpackHalf4Z(v: Long): Half = Half.fromBits(unpackInt2Y(v).toShort())
internal actual inline fun unpackHalf4W(v: Long): Half = Half.fromBits((unpackInt2Y(v) shr 16).toShort())
