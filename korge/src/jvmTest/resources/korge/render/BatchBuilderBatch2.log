createBuffer():0
createBuffer():1
createBuffer():2
createBuffer():3
createBuffer():4
createBuffer():5
createBuffer():6
createBuffer():7
textureCreate: 1
createTexture():0
RenderBuffer[0].setSize(16, 16)
createMainRenderBuffer():0
Buffer[4].afterSetMem(mem[192])
Buffer[5].afterSetMem(mem[16384])
Buffer[6].afterSetMem(mem[16384])
Buffer[7].afterSetMem(mem[24])
programCreate: 1, Program(name=BatchBuilder2D.Tinted.NoAdd, attributes=[a_Tex, a_TexIndex, a_Wrap, a_Col, a_Col2, a_Pos], uniforms=[u_ProjMat, u_ViewMat, u_Tex0, u_Tex1, u_Tex2, u_Tex3, u_OutputPre]), ProgramConfig(externalTextureSampler=false)
programCreate.fragment:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform sampler2D u_Tex0;
uniform sampler2D u_Tex1;
uniform sampler2D u_Tex2;
uniform sampler2D u_Tex3;
uniform bool u_OutputPre;
varying lowp float v_Wrap;
varying mediump vec2 v_Tex;
varying lowp float v_TexIndex;
varying vec4 v_Col;
void main() {
	vec4 temp0;
	if ((v_Wrap != 0.0)) {
		temp0.xy = fract(v_Tex.xy);
	}
	else {
		temp0.xy = v_Tex.xy;
	}
	if ((v_TexIndex <= 1.0)) {
		if ((v_TexIndex == 0.0)) {
			gl_FragColor = texture2D(u_Tex0, temp0.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex1, temp0.xy);
		}
	}
	else {
		if ((v_TexIndex == 2.0)) {
			gl_FragColor = texture2D(u_Tex2, temp0.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex3, temp0.xy);
		}
	}
	gl_FragColor = (gl_FragColor * v_Col);
	if ((gl_FragColor.a <= 0.0)) {
		discard;
	}
	if ((!(u_OutputPre))) {
		gl_FragColor.rgb = (gl_FragColor.rgb / gl_FragColor.a);
	}
}

programCreate.vertex:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute mediump vec2 a_Tex;
attribute lowp float a_TexIndex;
attribute lowp float a_Wrap;
attribute lowp vec4 a_Col;
attribute vec4 a_Col2;
attribute highp vec2 a_Pos;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying mediump vec2 v_Tex;
varying lowp float v_TexIndex;
varying lowp float v_Wrap;
varying vec4 v_Col;
varying vec4 v_Col2;
void main() {
	v_Tex = a_Tex;
	v_TexIndex = a_TexIndex;
	v_Wrap = a_Wrap;
	v_Col = vec4((a_Col.rgb * a_Col.a), a_Col.a);
	v_Col2 = a_Col2;
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4(a_Pos, 0.0, 1.0));
}

programUse: 1
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[4], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[5], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[6], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.125, 0, 0, 0, 0, -0.125, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=12, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2, 4, 5, 6, 7, 4, 6]
::draw.attributes[0]: []
::draw.vertex[0]: 
::draw.vertex[1]: 
::draw.vertex[2]: 
::draw.vertex[3]: 
::draw.vertex[4]: 
::draw.vertex[5]: 
::draw.vertex[6]: 
::draw.vertex[7]: 
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[4], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[5], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[6], layout=VertexLayout[a_Wrap])])