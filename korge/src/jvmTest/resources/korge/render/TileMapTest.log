createBuffer():0
createBuffer():1
createBuffer():2
createBuffer():3
createBuffer():4
clear(#000000ff, 1.0, 0, true, true, true)
RenderBuffer[0].setSize(640, 480)
createMainRenderBuffer():0
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=64, height=64), 64, 64)
Buffer[0].afterSetMem(mem[261888])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[32736])
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.003125, 0, 0, 0, 0, -0.004166667, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=16368, instances=1, indexType=USHORT
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
Buffer[0].afterSetMem(mem[261888])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[32736])
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.003125, 0, 0, 0, 0, -0.004166667, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=16368, instances=1, indexType=USHORT
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
Buffer[0].afterSetMem(mem[261888])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[32736])
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.003125, 0, 0, 0, 0, -0.004166667, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=16368, instances=1, indexType=USHORT
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
Buffer[0].afterSetMem(mem[174336])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[21792])
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.003125, 0, 0, 0, 0, -0.004166667, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=10896, instances=1, indexType=USHORT
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
disposeTemporalPerFrameStuff()
flipInternal()
finish