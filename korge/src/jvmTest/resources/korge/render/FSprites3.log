RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=32, height=32), 32, 32)
createBuffer():5
Buffer[5].afterSetMem(mem[128])
createBuffer():6
Buffer[6].afterSetMem(mem[16])
createBuffer():7
Buffer[7].afterSetMem(mem[16])
createBuffer():8
Buffer[8].afterSetMem(mem[32])
enable: SCISSOR
scissor: 0, 0, 200, 200
programCreate: 1, Program(name=FSprites3, attributes=[a_uv1, a_uv0, a_colMul, a_texId, a_xy, a_rangle, a_scale, a_axy, a_rxy], uniforms=[u_texSize0, u_texSize1, u_texSize2, u_ProjMat, u_ViewMat, u_Tex0, u_Tex1, u_Tex2, u_OutputPre]), ProgramConfig(externalTextureSampler=false)
programCreate.fragment:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
uniform sampler2D u_Tex0;
uniform sampler2D u_Tex1;
uniform sampler2D u_Tex2;
uniform bool u_OutputPre;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
varying vec4 v_Col;
void main() {
	if ((v_TexId <= 1.0)) {
		if ((v_TexId == 0.0)) {
			gl_FragColor = texture2D(u_Tex0, v_Tex.xy);
		}
		else {
			gl_FragColor = texture2D(u_Tex1, v_Tex.xy);
		}
	}
	else {
		gl_FragColor = texture2D(u_Tex2, v_Tex.xy);
	}
	gl_FragColor = (gl_FragColor * v_Col);
	if ((gl_FragColor.a <= 0.0)) {
		discard;
	}
	if ((!(u_OutputPre))) {
		gl_FragColor.rgb = (gl_FragColor.rgb / gl_FragColor.a);
	}
}

programCreate.vertex:#version 100 compatibility
#ifdef GL_ES
	precision highp float;
	precision highp int;
	precision lowp sampler2D;
	precision lowp samplerCube;
#else
	  #define highp 
	  #define mediump 
	  #define lowp 
#endif
attribute vec2 a_uv1;
attribute vec2 a_uv0;
attribute lowp vec4 a_colMul;
attribute lowp float a_texId;
attribute vec2 a_xy;
attribute float a_rangle;
attribute vec2 a_scale;
attribute vec2 a_axy;
attribute vec2 a_rxy;
uniform vec2 u_texSize0;
uniform vec2 u_texSize1;
uniform vec2 u_texSize2;
uniform mat4 u_ProjMat;
uniform mat4 u_ViewMat;
varying vec4 v_Col;
varying lowp float v_TexId;
varying mediump vec2 v_Tex;
void main() {
	vec4 temp1;
	vec4 temp0;
	mat2 temp2;
	temp1.xy = (a_uv1 - a_uv0);
	v_Col = a_colMul;
	v_TexId = a_texId;
	if ((a_texId <= 1.0)) {
		if ((a_texId == 0.0)) {
			temp1.zw = u_texSize0;
		}
		else {
			temp1.zw = u_texSize1;
		}
	}
	else {
		temp1.zw = u_texSize2;
	}
	v_Tex = (vec2(mix(a_uv0.x, a_uv1.x, a_xy.x), mix(a_uv0.y, a_uv1.y, a_xy.y)) * temp1.zw);
	temp0.x = cos(a_rangle);
	temp0.y = sin(a_rangle);
	temp2 = mat2(temp0.x, (-(temp0.y)), temp0.y, temp0.x);
	temp0.zw = (temp1.xy * a_scale);
	temp0.xy = (temp2 * ((a_xy - a_axy) * temp0.zw));
	gl_Position = ((u_ProjMat * u_ViewMat) * vec4((temp0.xy + vec2(a_rxy.x, a_rxy.y)), 0.0, 1.0));
}

programUse: 1
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[8], layout=VertexLayout[a_xy]), AGVertexData(_buffer=Buffer[5], layout=VertexLayout[a_rxy, a_scale, a_rangle, a_axy, a_uv0, a_uv1]), AGVertexData(_buffer=Buffer[6], layout=VertexLayout[a_colMul]), AGVertexData(_buffer=Buffer[7], layout=VertexLayout[a_texId])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.02, 0, 0, 0, 0, -0.02, 0, 0, 0, 0, -1, 0, -1, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
uboSet.uniform: Uniform(u_texSize0) = AGValue[TFLOAT]([[0.03125, 0.03125]])
uboSet.uniform: Uniform(u_texSize1) = AGValue[TFLOAT]([[0.03125, 0.03125]])
uboSet.uniform: Uniform(u_texSize2) = AGValue[TFLOAT]([[0.03125, 0.03125]])
uboSet.uniform: Uniform(u_texSize3) = AGValue[TFLOAT]([[0, 0]])
uboSet.uniform: Uniform(u_texSize4) = AGValue[TFLOAT]([[0, 0]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLE_FAN, offset=0, count=4, instances=4, indexType=null
::draw.indices: [0, 1, 2, 3]
::draw.attributes[0]: []
::draw.vertex[0]: 
::draw.vertex[1]: 
::draw.vertex[2]: 
::draw.vertex[3]: 
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[8], layout=VertexLayout[a_xy]), AGVertexData(_buffer=Buffer[5], layout=VertexLayout[a_rxy, a_scale, a_rangle, a_axy, a_uv0, a_uv1]), AGVertexData(_buffer=Buffer[6], layout=VertexLayout[a_colMul]), AGVertexData(_buffer=Buffer[7], layout=VertexLayout[a_texId])])
Buffer[5].afterSetMem(mem[0])
disposeTemporalPerFrameStuff()
flipInternal()
finish