createBuffer():0
createBuffer():1
createBuffer():2
createBuffer():3
createBuffer():4
RenderBuffer[0].setSize(800, 600)
createMainRenderBuffer():0
RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
disposeTemporalPerFrameStuff()
flipInternal()
finish
RenderBuffer[0].set()
clear(#00000000, 1.0, 0, true, true, true)
createRenderBuffer():1
RenderBuffer[1].setSize(512, 512)
RenderBuffer[1].set()
clear(#00000000, 1.0, 0, true, true, true)
textureCreate: 1
createTexture():0
Texture[0].uploadedBitmap(SyncBitmapSource(rgba=true, width=1, height=1), 1, 1)
Buffer[0].afterSetMem(mem[96])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[12])
enable: SCISSOR
scissor: 0, 0, 512, 512
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.00390625, 0, 0, 0, 0, 0.00390625, 0, 0, 0, 0, -1, 0, -1, -1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[1]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: ONE, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[0]: []
::draw.vertex[0]: 
::draw.vertex[1]: 
::draw.vertex[2]: 
::draw.vertex[3]: 
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
RenderBuffer[0].set()
textureCreate: 2
createTexture():1
textureCreate: 3
createTexture():2
Texture[2].uploadedBitmap(SyncBitmapSource(rgba=true, width=64, height=64), 64, 64)
Buffer[0].afterSetMem(mem[96])
Buffer[1].afterSetMem(mem[16384])
Buffer[2].afterSetMem(mem[16384])
Buffer[3].afterSetMem(mem[12])
enable: SCISSOR
scissor: 101, 0, 600, 600
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
uboSet:
uboSet.uniform: Uniform(u_ProjMat) = AGValue[TFLOAT]([[0.0029296875, 0, 0, 0, 0, -0.00390625, 0, 0, 0, 0, -1, 0, -0.7480469, 1, 0, 1]])
uboSet.uniform: Uniform(u_ViewMat) = AGValue[TFLOAT]([[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])
uboSet.uniform: Uniform(u_Tex0) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Tex1) = AGValue[TINT]([[1]])
uboSet.uniform: Uniform(u_Tex2) = AGValue[TINT]([[2]])
uboSet.uniform: Uniform(u_Tex3) = AGValue[TINT]([[3]])
uboSet.uniform: Uniform(u_OutputPre) = AGValue[TBOOL]([[0]])
uboSet.uniform: Uniform(effectTextureSize) = AGValue[TFLOAT]([[512, 512]])
uboSet.uniform: Uniform(u_MaxTexCoords) = AGValue[TFLOAT]([[1, 1]])
uboSet.uniform: Uniform(u_StdTexDerivates) = AGValue[TFLOAT]([[0.001953125, 0.001953125]])
uboSet.uniform: Uniform(u_Ratio) = AGValue[TFLOAT]([[0.5]])
uboSet.uniform: Uniform(u_Mask) = AGValue[TINT]([[0]])
uboSet.uniform: Uniform(u_Reversed) = AGValue[TFLOAT]([[0]])
uboSet.uniform: Uniform(u_Smooth) = AGValue[TFLOAT]([[1]])
uboSet.uniform: Uniform(u_filterScale) = AGValue[TFLOAT]([[1]])
enable: BLEND
blendEquation: ADD, ADD
blendFunction: SOURCE_ALPHA, ONE_MINUS_SOURCE_ALPHA, ONE, ONE_MINUS_SOURCE_ALPHA
disable: CULL_FACE
depthMask: true
depthRange: 0.0, 1.0
disable: DEPTH
colorMask: true, true, true, true
disable: STENCIL
stencilMask: 0
draw: TRIANGLES, offset=0, count=6, instances=1, indexType=USHORT
::draw.indices: [0, 1, 2, 3, 0, 2]
::draw.attributes[0]: []
::draw.vertex[0]: 
::draw.vertex[1]: 
::draw.vertex[2]: 
::draw.vertex[3]: 
vaoUse: AGVertexArrayObject(list=[AGVertexData(_buffer=Buffer[0], layout=VertexLayout[a_Pos, a_Tex, a_Col, a_Col2]), AGVertexData(_buffer=Buffer[1], layout=VertexLayout[a_TexIndex]), AGVertexData(_buffer=Buffer[2], layout=VertexLayout[a_Wrap])])
disposeTemporalPerFrameStuff()
flipInternal()
finish