package korlibs.audio.format.mp3.javamp3

import kotlin.math.PI
import kotlin.math.cos
import kotlin.math.pow
import kotlin.math.sin
import kotlin.math.tan

internal object JavaMp3DecoderTables {
    const val L3_NSAMPLES = 576
    val INV_SQUARE_2: Float = 0.70710678118654752440f
    val BITRATE_LAYER_I: IntArray = intArrayOf(0, 32000, 64000, 96000, 128000, 160000, 192000, 224000, 256000, 288000, 320000, 352000, 384000, 416000, 448000)
    val BITRATE_LAYER_II: IntArray = intArrayOf(0, 32000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000, 192000, 224000, 256000, 320000, 384000)
    val BITRATE_LAYER_III: IntArray = intArrayOf(0, 32000, 40000, 48000, 56000, 64000, 80000, 96000, 112000, 128000, 160000, 192000, 224000, 256000, 320000)
    val SAMPLING_FREQUENCY: IntArray = intArrayOf(44100, 48000, 32000)
    val SCALEFACTORS: FloatArray = floatArrayOf(2.00000000000000f,1.58740105196820f,1.25992104989487f,1.00000000000000f,0.79370052598410f,0.62996052494744f,0.50000000000000f,0.39685026299205f,0.31498026247372f,0.25000000000000f,0.19842513149602f,0.15749013123686f,0.12500000000000f,0.09921256574801f,0.07874506561843f,0.06250000000000f,0.04960628287401f,0.03937253280921f,0.03125000000000f,0.02480314143700f,0.01968626640461f,0.01562500000000f,0.01240157071850f,0.00984313320230f,0.00781250000000f,0.00620078535925f,0.00492156660115f,0.00390625000000f,0.00310039267963f,0.00246078330058f,0.00195312500000f,0.00155019633981f,0.00123039165029f,0.00097656250000f,0.00077509816991f,0.00061519582514f,0.00048828125000f,0.00038754908495f,0.00030759791257f,0.00024414062500f,0.00019377454248f,0.00015379895629f,0.00012207031250f,0.00009688727124f,0.00007689947814f,0.00006103515625f,0.00004844363562f,0.00003844973907f,0.00003051757813f,0.00002422181781f,0.00001922486954f,0.00001525878906f,0.00001211090890f,0.00000961243477f,0.00000762939453f,0.00000605545445f,0.00000480621738f,0.00000381469727f,0.00000302772723f,0.00000240310869f,0.00000190734863f,0.00000151386361f,0.00000120155435f,0.0f)
    val SCALEFACTOR_SIZES_LAYER_III: IntArray = intArrayOf(
        0, 0, 0, 1, 0, 2, 0, 3,
        3, 0, 1, 1, 1, 2, 1, 3,
        2, 1, 2, 2, 2, 3, 3, 1,
        3, 2, 3, 3, 4, 2, 4, 3
    )
    val SCALEFACTOR_BAND_INDICES_LAYER_III: IntArray = intArrayOf(
        0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 52, 62, 74, 90, 110, 134, 162,
        196, 238, 288, 342, 418, 576,
        0, 4, 8, 12, 16, 22, 30, 40, 52, 66, 84, 106, 136, 192
        ,
        0, 4, 8, 12, 16, 20, 24, 30, 36, 42, 50, 60, 72, 88, 106, 128, 156,
        190, 230, 276, 330, 384, 576,
        0, 4, 8, 12, 16, 22, 28, 38, 50, 64, 80, 100, 126, 192
        ,
        0, 4, 8, 12, 16, 20, 24, 30, 36, 44, 54, 66, 82, 102, 126, 156, 194,
        240, 296, 364, 448, 550, 576,
        0, 4, 8, 12, 16, 22, 30, 42, 58, 78, 104, 138, 180, 192
    )
    val CS_ALIASING_LAYER_III: FloatArray =
        floatArrayOf(0.857493f, 0.881742f, 0.949629f, 0.983315f, 0.995518f, 0.999161f, 0.999899f, 0.999993f)
    val CA_ALIASING_LAYER_III: FloatArray =
        floatArrayOf(-0.514496f, -0.471732f, -0.313377f, -0.181913f, -0.094574f, -0.040966f, -0.014199f, -0.003700f)
    val POWTAB_LAYER_III: FloatArray = FloatArray(8207) { i -> pow(i.toDouble(), 4.0 / 3.0).toFloat() }
    val IS_RATIOS_LAYER_III: FloatArray = FloatArray(6) { i -> tan((i * PI) / 12.0).toFloat() }
    val IMDCT_WINDOW_LAYER_III: FloatArray = FloatArray(4 * 36).also { IMDCT_WINDOW_LAYER_III ->
        /* Blocktype 0 */
        for (i in 0..35) IMDCT_WINDOW_LAYER_III[0 * 36 + i] = sin(PI / 36 * (i + 0.5)).toFloat()
        /* Blocktype 1 */
        for (i in 0..17) IMDCT_WINDOW_LAYER_III[1 * 36 + i] = sin(PI / 36 * (i + 0.5)).toFloat()
        for (i in 18..23) IMDCT_WINDOW_LAYER_III[1 * 36 + i] = 1.0f
        for (i in 24..29) IMDCT_WINDOW_LAYER_III[1 * 36 + i] = sin(PI / 12 * (i + 0.5 - 18.0)).toFloat()
        /* Blocktype 2 */
        for (i in 0..11) IMDCT_WINDOW_LAYER_III[2 * 36 + i] = sin(PI / 12 * (i + 0.5)).toFloat()
        /* Blocktype 3 */
        for (i in 6..11) IMDCT_WINDOW_LAYER_III[3 * 36 + i] = sin(PI / 12 * (i + 0.5 - 6.0)).toFloat()
        for (i in 12..17) IMDCT_WINDOW_LAYER_III[3 * 36 + i] = 1.0f
        for (i in 18..35) IMDCT_WINDOW_LAYER_III[3 * 36 + i] = sin(PI / 36 * (i + 0.5)).toFloat()

    }
    val PRE_FRACTOR_LAYER_I: FloatArray = FloatArray(16) { i ->
        val pow: Double = (1 shl i.toDouble().toInt()).toDouble()
        (pow / (pow - 1)).toFloat()
    }
    val NIK_COEFFICIENTS: FloatArray = FloatArray(64 * 32).also { NIK_COEFFICIENTS ->
        for (i in 0..63) {
            for (k in 0..31) {
                var value: Double = 1e9 * cos((16 + i) * (2 * k + 1) * PI / 64)
                if (value >= 0) {
                    value = ((value + 0.5)).toDouble()
                } else {
                    value = ((value - 0.5)).toDouble()
                }
                NIK_COEFFICIENTS[i * 32 + k] = (value * 1e-9).toFloat()
            }
        }
    }
    val SYNTH_WINDOW_TABLE_LAYER_III: FloatArray = FloatArray(64 * 32).also { SYNTH_WINDOW_TABLE_LAYER_III ->
        for (i in 0..63) {
            for (j in 0..31) {
                SYNTH_WINDOW_TABLE_LAYER_III[i * 32 + j] =
                    cos((16 + i) * (2 * j + 1) * PI / 64.0).toFloat()
            }
        }
    }
    val DI_COEFFICIENTS: FloatArray = floatArrayOf(0.000000000f,-0.000015259f,-0.000015259f,-0.000015259f,-0.000015259f,-0.000015259f,-0.000015259f,-0.000030518f,-0.000030518f,-0.000030518f,-0.000030518f,-0.000045776f,-0.000045776f,-0.000061035f,-0.000061035f,-0.000076294f,-0.000076294f,-0.000091553f,-0.000106812f,-0.000106812f,-0.000122070f,-0.000137329f,-0.000152588f,-0.000167847f,-0.000198364f,-0.000213623f,-0.000244141f,-0.000259399f,-0.000289917f,-0.000320435f,-0.000366211f,-0.000396729f,-0.000442505f,-0.000473022f,-0.000534058f,-0.000579834f,-0.000625610f,-0.000686646f,-0.000747681f,-0.000808716f,-0.000885010f,-0.000961304f,-0.001037598f,-0.001113892f,-0.001205444f,-0.001296997f,-0.001388550f,-0.001480103f,-0.001586914f,-0.001693726f,-0.001785278f,-0.001907349f,-0.002014160f,-0.002120972f,-0.002243042f,-0.002349854f,-0.002456665f,-0.002578735f,-0.002685547f,-0.002792358f,-0.002899170f,-0.002990723f,-0.003082275f,-0.003173828f,0.003250122f,0.003326416f,0.003387451f,0.003433228f,0.003463745f,0.003479004f,0.003479004f,0.003463745f,0.003417969f,0.003372192f,0.003280640f,0.003173828f,0.003051758f,0.002883911f,0.002700806f,0.002487183f,0.002227783f,0.001937866f,0.001617432f,0.001266479f,0.000869751f,0.000442505f,-0.000030518f,-0.000549316f,-0.001098633f,-0.001693726f,-0.002334595f,-0.003005981f,-0.003723145f,-0.004486084f,-0.005294800f,-0.006118774f,-0.007003784f,-0.007919312f,-0.008865356f,-0.009841919f,-0.010848999f,-0.011886597f,-0.012939453f,-0.014022827f,-0.015121460f,-0.016235352f,-0.017349243f,-0.018463135f,-0.019577026f,-0.020690918f,-0.021789551f,-0.022857666f,-0.023910522f,-0.024932861f,-0.025909424f,-0.026840210f,-0.027725220f,-0.028533936f,-0.029281616f,-0.029937744f,-0.030532837f,-0.031005859f,-0.031387329f,-0.031661987f,-0.031814575f,-0.031845093f,-0.031738281f,-0.031478882f,0.031082153f,0.030517578f,0.029785156f,0.028884888f,0.027801514f,0.026535034f,0.025085449f,0.023422241f,0.021575928f,0.019531250f,0.017257690f,0.014801025f,0.012115479f,0.009231567f,0.006134033f,0.002822876f,-0.000686646f,-0.004394531f,-0.008316040f,-0.012420654f,-0.016708374f,-0.021179199f,-0.025817871f,-0.030609131f,-0.035552979f,-0.040634155f,-0.045837402f,-0.051132202f,-0.056533813f,-0.061996460f,-0.067520142f,-0.073059082f,-0.078628540f,-0.084182739f,-0.089706421f,-0.095169067f,-0.100540161f,-0.105819702f,-0.110946655f,-0.115921021f,-0.120697021f,-0.125259399f,-0.129562378f,-0.133590698f,-0.137298584f,-0.140670776f,-0.143676758f,-0.146255493f,-0.148422241f,-0.150115967f,-0.151306152f,-0.151962280f,-0.152069092f,-0.151596069f,-0.150497437f,-0.148773193f,-0.146362305f,-0.143264771f,-0.139450073f,-0.134887695f,-0.129577637f,-0.123474121f,-0.116577148f,-0.108856201f,0.100311279f,0.090927124f,0.080688477f,0.069595337f,0.057617187f,0.044784546f,0.031082153f,0.016510010f,0.001068115f,-0.015228271f,-0.032379150f,-0.050354004f,-0.069168091f,-0.088775635f,-0.109161377f,-0.130310059f,-0.152206421f,-0.174789429f,-0.198059082f,-0.221984863f,-0.246505737f,-0.271591187f,-0.297210693f,-0.323318481f,-0.349868774f,-0.376800537f,-0.404083252f,-0.431655884f,-0.459472656f,-0.487472534f,-0.515609741f,-0.543823242f,-0.572036743f,-0.600219727f,-0.628295898f,-0.656219482f,-0.683914185f,-0.711318970f,-0.738372803f,-0.765029907f,-0.791213989f,-0.816864014f,-0.841949463f,-0.866363525f,-0.890090942f,-0.913055420f,-0.935195923f,-0.956481934f,-0.976852417f,-0.996246338f,-1.014617920f,-1.031936646f,-1.048156738f,-1.063217163f,-1.077117920f,-1.089782715f,-1.101211548f,-1.111373901f,-1.120223999f,-1.127746582f,-1.133926392f,-1.138763428f,-1.142211914f,-1.144287109f,1.144989014f,1.144287109f,1.142211914f,1.138763428f,1.133926392f,1.127746582f,1.120223999f,1.111373901f,1.101211548f,1.089782715f,1.077117920f,1.063217163f,1.048156738f,1.031936646f,1.014617920f,0.996246338f,0.976852417f,0.956481934f,0.935195923f,0.913055420f,0.890090942f,0.866363525f,0.841949463f,0.816864014f,0.791213989f,0.765029907f,0.738372803f,0.711318970f,0.683914185f,0.656219482f,0.628295898f,0.600219727f,0.572036743f,0.543823242f,0.515609741f,0.487472534f,0.459472656f,0.431655884f,0.404083252f,0.376800537f,0.349868774f,0.323318481f,0.297210693f,0.271591187f,0.246505737f,0.221984863f,0.198059082f,0.174789429f,0.152206421f,0.130310059f,0.109161377f,0.088775635f,0.069168091f,0.050354004f,0.032379150f,0.015228271f,-0.001068115f,-0.016510010f,-0.031082153f,-0.044784546f,-0.057617187f,-0.069595337f,-0.080688477f,-0.090927124f,0.100311279f,0.108856201f,0.116577148f,0.123474121f,0.129577637f,0.134887695f,0.139450073f,0.143264771f,0.146362305f,0.148773193f,0.150497437f,0.151596069f,0.152069092f,0.151962280f,0.151306152f,0.150115967f,0.148422241f,0.146255493f,0.143676758f,0.140670776f,0.137298584f,0.133590698f,0.129562378f,0.125259399f,0.120697021f,0.115921021f,0.110946655f,0.105819702f,0.100540161f,0.095169067f,0.089706421f,0.084182739f,0.078628540f,0.073059082f,0.067520142f,0.061996460f,0.056533813f,0.051132202f,0.045837402f,0.040634155f,0.035552979f,0.030609131f,0.025817871f,0.021179199f,0.016708374f,0.012420654f,0.008316040f,0.004394531f,0.000686646f,-0.002822876f,-0.006134033f,-0.009231567f,-0.012115479f,-0.014801025f,-0.017257690f,-0.019531250f,-0.021575928f,-0.023422241f,-0.025085449f,-0.026535034f,-0.027801514f,-0.028884888f,-0.029785156f,-0.030517578f,0.031082153f,0.031478882f,0.031738281f,0.031845093f,0.031814575f,0.031661987f,0.031387329f,0.031005859f,0.030532837f,0.029937744f,0.029281616f,0.028533936f,0.027725220f,0.026840210f,0.025909424f,0.024932861f,0.023910522f,0.022857666f,0.021789551f,0.020690918f,0.019577026f,0.018463135f,0.017349243f,0.016235352f,0.015121460f,0.014022827f,0.012939453f,0.011886597f,0.010848999f,0.009841919f,0.008865356f,0.007919312f,0.007003784f,0.006118774f,0.005294800f,0.004486084f,0.003723145f,0.003005981f,0.002334595f,0.001693726f,0.001098633f,0.000549316f,0.000030518f,-0.000442505f,-0.000869751f,-0.001266479f,-0.001617432f,-0.001937866f,-0.002227783f,-0.002487183f,-0.002700806f,-0.002883911f,-0.003051758f,-0.003173828f,-0.003280640f,-0.003372192f,-0.003417969f,-0.003463745f,-0.003479004f,-0.003479004f,-0.003463745f,-0.003433228f,-0.003387451f,-0.003326416f,0.003250122f,0.003173828f,0.003082275f,0.002990723f,0.002899170f,0.002792358f,0.002685547f,0.002578735f,0.002456665f,0.002349854f,0.002243042f,0.002120972f,0.002014160f,0.001907349f,0.001785278f,0.001693726f,0.001586914f,0.001480103f,0.001388550f,0.001296997f,0.001205444f,0.001113892f,0.001037598f,0.000961304f,0.000885010f,0.000808716f,0.000747681f,0.000686646f,0.000625610f,0.000579834f,0.000534058f,0.000473022f,0.000442505f,0.000396729f,0.000366211f,0.000320435f,0.000289917f,0.000259399f,0.000244141f,0.000213623f,0.000198364f,0.000167847f,0.000152588f,0.000137329f,0.000122070f,0.000106812f,0.000106812f,0.000091553f,0.000076294f,0.000076294f,0.000061035f,0.000061035f,0.000045776f,0.000045776f,0.000030518f,0.000030518f,0.000030518f,0.000030518f,0.000015259f,0.000015259f,0.000015259f,0.000015259f,0.000015259f,0.000015259f)
    val SHIFT_ENDIANESS: IntArray = intArrayOf(255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)
    val SB_LIMIT: IntArray = intArrayOf(27, 30, 8, 12)
    val NBAL: Array<IntArray> = arrayOf(
        intArrayOf(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2),
        intArrayOf(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2),
        intArrayOf(4, 4, 3, 3, 3, 3, 3, 3),
        intArrayOf(4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3)
    )
    val QUANTIZATION_INDEX_LAYER_II: Array<Array<IntArray>> = arrayOf(
        arrayOf(
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16)
        ),
        arrayOf(
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 2, 3, 4, 5, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16),
            intArrayOf(0, 1, 16)
        ),
        arrayOf(
            intArrayOf(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
            intArrayOf(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7)
        ),
        arrayOf(
            intArrayOf(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
            intArrayOf(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7),
            intArrayOf(0, 1, 3, 4, 5, 6, 7)
        )
    )
    val NLEVELS: IntArray = intArrayOf(3, 5, 7, 9, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535)
    val C_LAYER_II: FloatArray = floatArrayOf(
        1.33333333333f,
        1.60000000000f,
        1.14285714286f,
        1.77777777777f,
        1.06666666666f,
        1.03225806452f,
        1.01587301587f,
        1.00787401575f,
        1.00392156863f,
        1.00195694716f,
        1.00097751711f,
        1.00048851979f,
        1.00024420024f,
        1.00012208522f,
        1.00006103888f,
        1.00003051851f,
        1.00001525902f
    )
    val D_LAYER_II: FloatArray = floatArrayOf(
        0.50000000000f,
        0.50000000000f,
        0.25000000000f,
        0.50000000000f,
        0.12500000000f,
        0.06250000000f,
        0.03125000000f,
        0.01562500000f,
        0.00781250000f,
        0.00390625000f,
        0.00195312500f,
        0.00097656250f,
        0.00048828125f,
        0.00024414063f,
        0.00012207031f,
        0.00006103516f,
        0.00003051758f
    )
    val GROUPING_LAYER_II: BooleanArray =
        booleanArrayOf(true, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false)
    val BITS_LAYER_II: IntArray = intArrayOf(5, 7, 3, 10, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
    val HUFFMAN_TABLE_LAYER_III: IntArray = intArrayOf( //g_huffman_table_1[7] = {
        0x0201, 0x0000, 0x0201, 0x0010, 0x0201, 0x0001, 0x0011,  //},g_huffman_table_2[17] = {
        0x0201, 0x0000, 0x0401, 0x0201, 0x0010, 0x0001, 0x0201, 0x0011, 0x0401, 0x0201, 0x0020,
        0x0021, 0x0201, 0x0012, 0x0201, 0x0002, 0x0022,  //},g_huffman_table_3[17] = {
        0x0401, 0x0201, 0x0000, 0x0001, 0x0201, 0x0011, 0x0201, 0x0010, 0x0401, 0x0201, 0x0020,
        0x0021, 0x0201, 0x0012, 0x0201, 0x0002, 0x0022,  //},g_huffman_table_5[31] = {
        0x0201, 0x0000, 0x0401, 0x0201, 0x0010, 0x0001, 0x0201, 0x0011, 0x0801, 0x0401, 0x0201,
        0x0020, 0x0002, 0x0201, 0x0021, 0x0012, 0x0801, 0x0401, 0x0201, 0x0022, 0x0030, 0x0201,
        0x0003, 0x0013, 0x0201, 0x0031, 0x0201, 0x0032, 0x0201, 0x0023, 0x0033,  //},g_huffman_table_6[31] = {
        0x0601, 0x0401, 0x0201, 0x0000, 0x0010, 0x0011, 0x0601, 0x0201, 0x0001, 0x0201, 0x0020,
        0x0021, 0x0601, 0x0201, 0x0012, 0x0201, 0x0002, 0x0022, 0x0401, 0x0201, 0x0031, 0x0013,
        0x0401, 0x0201, 0x0030, 0x0032, 0x0201, 0x0023, 0x0201, 0x0003, 0x0033,  //},g_huffman_table_7[71] = {
        0x0201, 0x0000, 0x0401, 0x0201, 0x0010, 0x0001, 0x0801, 0x0201, 0x0011, 0x0401, 0x0201,
        0x0020, 0x0002, 0x0021, 0x1201, 0x0601, 0x0201, 0x0012, 0x0201, 0x0022, 0x0030, 0x0401,
        0x0201, 0x0031, 0x0013, 0x0401, 0x0201, 0x0003, 0x0032, 0x0201, 0x0023, 0x0004, 0x0a01,
        0x0401, 0x0201, 0x0040, 0x0041, 0x0201, 0x0014, 0x0201, 0x0042, 0x0024, 0x0c01, 0x0601,
        0x0401, 0x0201, 0x0033, 0x0043, 0x0050, 0x0401, 0x0201, 0x0034, 0x0005, 0x0051, 0x0601,
        0x0201, 0x0015, 0x0201, 0x0052, 0x0025, 0x0401, 0x0201, 0x0044, 0x0035, 0x0401, 0x0201,
        0x0053, 0x0054, 0x0201, 0x0045, 0x0055,  //},g_huffman_table_8[71] = {
        0x0601, 0x0201, 0x0000, 0x0201, 0x0010, 0x0001, 0x0201, 0x0011, 0x0401, 0x0201, 0x0021,
        0x0012, 0x0e01, 0x0401, 0x0201, 0x0020, 0x0002, 0x0201, 0x0022, 0x0401, 0x0201, 0x0030,
        0x0003, 0x0201, 0x0031, 0x0013, 0x0e01, 0x0801, 0x0401, 0x0201, 0x0032, 0x0023, 0x0201,
        0x0040, 0x0004, 0x0201, 0x0041, 0x0201, 0x0014, 0x0042, 0x0c01, 0x0601, 0x0201, 0x0024,
        0x0201, 0x0033, 0x0050, 0x0401, 0x0201, 0x0043, 0x0034, 0x0051, 0x0601, 0x0201, 0x0015,
        0x0201, 0x0005, 0x0052, 0x0601, 0x0201, 0x0025, 0x0201, 0x0044, 0x0035, 0x0201, 0x0053,
        0x0201, 0x0045, 0x0201, 0x0054, 0x0055,  //},g_huffman_table_9[71] = {
        0x0801, 0x0401, 0x0201, 0x0000, 0x0010, 0x0201, 0x0001, 0x0011, 0x0a01, 0x0401, 0x0201,
        0x0020, 0x0021, 0x0201, 0x0012, 0x0201, 0x0002, 0x0022, 0x0c01, 0x0601, 0x0401, 0x0201,
        0x0030, 0x0003, 0x0031, 0x0201, 0x0013, 0x0201, 0x0032, 0x0023, 0x0c01, 0x0401, 0x0201,
        0x0041, 0x0014, 0x0401, 0x0201, 0x0040, 0x0033, 0x0201, 0x0042, 0x0024, 0x0a01, 0x0601,
        0x0401, 0x0201, 0x0004, 0x0050, 0x0043, 0x0201, 0x0034, 0x0051, 0x0801, 0x0401, 0x0201,
        0x0015, 0x0052, 0x0201, 0x0025, 0x0044, 0x0601, 0x0401, 0x0201, 0x0005, 0x0054, 0x0053,
        0x0201, 0x0035, 0x0201, 0x0045, 0x0055,  //},g_huffman_table_10[127] = {
        0x0201, 0x0000, 0x0401, 0x0201, 0x0010, 0x0001, 0x0a01, 0x0201, 0x0011, 0x0401, 0x0201,
        0x0020, 0x0002, 0x0201, 0x0021, 0x0012, 0x1c01, 0x0801, 0x0401, 0x0201, 0x0022, 0x0030,
        0x0201, 0x0031, 0x0013, 0x0801, 0x0401, 0x0201, 0x0003, 0x0032, 0x0201, 0x0023, 0x0040,
        0x0401, 0x0201, 0x0041, 0x0014, 0x0401, 0x0201, 0x0004, 0x0033, 0x0201, 0x0042, 0x0024,
        0x1c01, 0x0a01, 0x0601, 0x0401, 0x0201, 0x0050, 0x0005, 0x0060, 0x0201, 0x0061, 0x0016,
        0x0c01, 0x0601, 0x0401, 0x0201, 0x0043, 0x0034, 0x0051, 0x0201, 0x0015, 0x0201, 0x0052,
        0x0025, 0x0401, 0x0201, 0x0026, 0x0036, 0x0071, 0x1401, 0x0801, 0x0201, 0x0017, 0x0401,
        0x0201, 0x0044, 0x0053, 0x0006, 0x0601, 0x0401, 0x0201, 0x0035, 0x0045, 0x0062, 0x0201,
        0x0070, 0x0201, 0x0007, 0x0064, 0x0e01, 0x0401, 0x0201, 0x0072, 0x0027, 0x0601, 0x0201,
        0x0063, 0x0201, 0x0054, 0x0055, 0x0201, 0x0046, 0x0073, 0x0801, 0x0401, 0x0201, 0x0037,
        0x0065, 0x0201, 0x0056, 0x0074, 0x0601, 0x0201, 0x0047, 0x0201, 0x0066, 0x0075, 0x0401,
        0x0201, 0x0057, 0x0076, 0x0201, 0x0067, 0x0077,  //},g_huffman_table_11[127] = {
        0x0601, 0x0201, 0x0000, 0x0201, 0x0010, 0x0001, 0x0801, 0x0201, 0x0011, 0x0401, 0x0201,
        0x0020, 0x0002, 0x0012, 0x1801, 0x0801, 0x0201, 0x0021, 0x0201, 0x0022, 0x0201, 0x0030,
        0x0003, 0x0401, 0x0201, 0x0031, 0x0013, 0x0401, 0x0201, 0x0032, 0x0023, 0x0401, 0x0201,
        0x0040, 0x0004, 0x0201, 0x0041, 0x0014, 0x1e01, 0x1001, 0x0a01, 0x0401, 0x0201, 0x0042,
        0x0024, 0x0401, 0x0201, 0x0033, 0x0043, 0x0050, 0x0401, 0x0201, 0x0034, 0x0051, 0x0061,
        0x0601, 0x0201, 0x0016, 0x0201, 0x0006, 0x0026, 0x0201, 0x0062, 0x0201, 0x0015, 0x0201,
        0x0005, 0x0052, 0x1001, 0x0a01, 0x0601, 0x0401, 0x0201, 0x0025, 0x0044, 0x0060, 0x0201,
        0x0063, 0x0036, 0x0401, 0x0201, 0x0070, 0x0017, 0x0071, 0x1001, 0x0601, 0x0401, 0x0201,
        0x0007, 0x0064, 0x0072, 0x0201, 0x0027, 0x0401, 0x0201, 0x0053, 0x0035, 0x0201, 0x0054,
        0x0045, 0x0a01, 0x0401, 0x0201, 0x0046, 0x0073, 0x0201, 0x0037, 0x0201, 0x0065, 0x0056,
        0x0a01, 0x0601, 0x0401, 0x0201, 0x0055, 0x0057, 0x0074, 0x0201, 0x0047, 0x0066, 0x0401,
        0x0201, 0x0075, 0x0076, 0x0201, 0x0067, 0x0077,  //},g_huffman_table_12[127] = {
        0x0c01, 0x0401, 0x0201, 0x0010, 0x0001, 0x0201, 0x0011, 0x0201, 0x0000, 0x0201, 0x0020,
        0x0002, 0x1001, 0x0401, 0x0201, 0x0021, 0x0012, 0x0401, 0x0201, 0x0022, 0x0031, 0x0201,
        0x0013, 0x0201, 0x0030, 0x0201, 0x0003, 0x0040, 0x1a01, 0x0801, 0x0401, 0x0201, 0x0032,
        0x0023, 0x0201, 0x0041, 0x0033, 0x0a01, 0x0401, 0x0201, 0x0014, 0x0042, 0x0201, 0x0024,
        0x0201, 0x0004, 0x0050, 0x0401, 0x0201, 0x0043, 0x0034, 0x0201, 0x0051, 0x0015, 0x1c01,
        0x0e01, 0x0801, 0x0401, 0x0201, 0x0052, 0x0025, 0x0201, 0x0053, 0x0035, 0x0401, 0x0201,
        0x0060, 0x0016, 0x0061, 0x0401, 0x0201, 0x0062, 0x0026, 0x0601, 0x0401, 0x0201, 0x0005,
        0x0006, 0x0044, 0x0201, 0x0054, 0x0045, 0x1201, 0x0a01, 0x0401, 0x0201, 0x0063, 0x0036,
        0x0401, 0x0201, 0x0070, 0x0007, 0x0071, 0x0401, 0x0201, 0x0017, 0x0064, 0x0201, 0x0046,
        0x0072, 0x0a01, 0x0601, 0x0201, 0x0027, 0x0201, 0x0055, 0x0073, 0x0201, 0x0037, 0x0056,
        0x0801, 0x0401, 0x0201, 0x0065, 0x0074, 0x0201, 0x0047, 0x0066, 0x0401, 0x0201, 0x0075,
        0x0057, 0x0201, 0x0076, 0x0201, 0x0067, 0x0077,  //},g_huffman_table_13[511] = {
        0x0201, 0x0000, 0x0601, 0x0201, 0x0010, 0x0201, 0x0001, 0x0011, 0x1c01, 0x0801, 0x0401,
        0x0201, 0x0020, 0x0002, 0x0201, 0x0021, 0x0012, 0x0801, 0x0401, 0x0201, 0x0022, 0x0030,
        0x0201, 0x0003, 0x0031, 0x0601, 0x0201, 0x0013, 0x0201, 0x0032, 0x0023, 0x0401, 0x0201,
        0x0040, 0x0004, 0x0041, 0x4601, 0x1c01, 0x0e01, 0x0601, 0x0201, 0x0014, 0x0201, 0x0033,
        0x0042, 0x0401, 0x0201, 0x0024, 0x0050, 0x0201, 0x0043, 0x0034, 0x0401, 0x0201, 0x0051,
        0x0015, 0x0401, 0x0201, 0x0005, 0x0052, 0x0201, 0x0025, 0x0201, 0x0044, 0x0053, 0x0e01,
        0x0801, 0x0401, 0x0201, 0x0060, 0x0006, 0x0201, 0x0061, 0x0016, 0x0401, 0x0201, 0x0080,
        0x0008, 0x0081, 0x1001, 0x0801, 0x0401, 0x0201, 0x0035, 0x0062, 0x0201, 0x0026, 0x0054,
        0x0401, 0x0201, 0x0045, 0x0063, 0x0201, 0x0036, 0x0070, 0x0601, 0x0401, 0x0201, 0x0007,
        0x0055, 0x0071, 0x0201, 0x0017, 0x0201, 0x0027, 0x0037, 0x4801, 0x1801, 0x0c01, 0x0401,
        0x0201, 0x0018, 0x0082, 0x0201, 0x0028, 0x0401, 0x0201, 0x0064, 0x0046, 0x0072, 0x0801,
        0x0401, 0x0201, 0x0084, 0x0048, 0x0201, 0x0090, 0x0009, 0x0201, 0x0091, 0x0019, 0x1801,
        0x0e01, 0x0801, 0x0401, 0x0201, 0x0073, 0x0065, 0x0201, 0x0056, 0x0074, 0x0401, 0x0201,
        0x0047, 0x0066, 0x0083, 0x0601, 0x0201, 0x0038, 0x0201, 0x0075, 0x0057, 0x0201, 0x0092,
        0x0029, 0x0e01, 0x0801, 0x0401, 0x0201, 0x0067, 0x0085, 0x0201, 0x0058, 0x0039, 0x0201,
        0x0093, 0x0201, 0x0049, 0x0086, 0x0601, 0x0201, 0x00a0, 0x0201, 0x0068, 0x000a, 0x0201,
        0x00a1, 0x001a, 0x4401, 0x1801, 0x0c01, 0x0401, 0x0201, 0x00a2, 0x002a, 0x0401, 0x0201,
        0x0095, 0x0059, 0x0201, 0x00a3, 0x003a, 0x0801, 0x0401, 0x0201, 0x004a, 0x0096, 0x0201,
        0x00b0, 0x000b, 0x0201, 0x00b1, 0x001b, 0x1401, 0x0801, 0x0201, 0x00b2, 0x0401, 0x0201,
        0x0076, 0x0077, 0x0094, 0x0601, 0x0401, 0x0201, 0x0087, 0x0078, 0x00a4, 0x0401, 0x0201,
        0x0069, 0x00a5, 0x002b, 0x0c01, 0x0601, 0x0401, 0x0201, 0x005a, 0x0088, 0x00b3, 0x0201,
        0x003b, 0x0201, 0x0079, 0x00a6, 0x0601, 0x0401, 0x0201, 0x006a, 0x00b4, 0x00c0, 0x0401,
        0x0201, 0x000c, 0x0098, 0x00c1, 0x3c01, 0x1601, 0x0a01, 0x0601, 0x0201, 0x001c, 0x0201,
        0x0089, 0x00b5, 0x0201, 0x005b, 0x00c2, 0x0401, 0x0201, 0x002c, 0x003c, 0x0401, 0x0201,
        0x00b6, 0x006b, 0x0201, 0x00c4, 0x004c, 0x1001, 0x0801, 0x0401, 0x0201, 0x00a8, 0x008a,
        0x0201, 0x00d0, 0x000d, 0x0201, 0x00d1, 0x0201, 0x004b, 0x0201, 0x0097, 0x00a7, 0x0c01,
        0x0601, 0x0201, 0x00c3, 0x0201, 0x007a, 0x0099, 0x0401, 0x0201, 0x00c5, 0x005c, 0x00b7,
        0x0401, 0x0201, 0x001d, 0x00d2, 0x0201, 0x002d, 0x0201, 0x007b, 0x00d3, 0x3401, 0x1c01,
        0x0c01, 0x0401, 0x0201, 0x003d, 0x00c6, 0x0401, 0x0201, 0x006c, 0x00a9, 0x0201, 0x009a,
        0x00d4, 0x0801, 0x0401, 0x0201, 0x00b8, 0x008b, 0x0201, 0x004d, 0x00c7, 0x0401, 0x0201,
        0x007c, 0x00d5, 0x0201, 0x005d, 0x00e0, 0x0a01, 0x0401, 0x0201, 0x00e1, 0x001e, 0x0401,
        0x0201, 0x000e, 0x002e, 0x00e2, 0x0801, 0x0401, 0x0201, 0x00e3, 0x006d, 0x0201, 0x008c,
        0x00e4, 0x0401, 0x0201, 0x00e5, 0x00ba, 0x00f0, 0x2601, 0x1001, 0x0401, 0x0201, 0x00f1,
        0x001f, 0x0601, 0x0401, 0x0201, 0x00aa, 0x009b, 0x00b9, 0x0201, 0x003e, 0x0201, 0x00d6,
        0x00c8, 0x0c01, 0x0601, 0x0201, 0x004e, 0x0201, 0x00d7, 0x007d, 0x0201, 0x00ab, 0x0201,
        0x005e, 0x00c9, 0x0601, 0x0201, 0x000f, 0x0201, 0x009c, 0x006e, 0x0201, 0x00f2, 0x002f,
        0x2001, 0x1001, 0x0601, 0x0401, 0x0201, 0x00d8, 0x008d, 0x003f, 0x0601, 0x0201, 0x00f3,
        0x0201, 0x00e6, 0x00ca, 0x0201, 0x00f4, 0x004f, 0x0801, 0x0401, 0x0201, 0x00bb, 0x00ac,
        0x0201, 0x00e7, 0x00f5, 0x0401, 0x0201, 0x00d9, 0x009d, 0x0201, 0x005f, 0x00e8, 0x1e01,
        0x0c01, 0x0601, 0x0201, 0x006f, 0x0201, 0x00f6, 0x00cb, 0x0401, 0x0201, 0x00bc, 0x00ad,
        0x00da, 0x0801, 0x0201, 0x00f7, 0x0401, 0x0201, 0x007e, 0x007f, 0x008e, 0x0601, 0x0401,
        0x0201, 0x009e, 0x00ae, 0x00cc, 0x0201, 0x00f8, 0x008f, 0x1201, 0x0801, 0x0401, 0x0201,
        0x00db, 0x00bd, 0x0201, 0x00ea, 0x00f9, 0x0401, 0x0201, 0x009f, 0x00eb, 0x0201, 0x00be,
        0x0201, 0x00cd, 0x00fa, 0x0e01, 0x0401, 0x0201, 0x00dd, 0x00ec, 0x0601, 0x0401, 0x0201,
        0x00e9, 0x00af, 0x00dc, 0x0201, 0x00ce, 0x00fb, 0x0801, 0x0401, 0x0201, 0x00bf, 0x00de,
        0x0201, 0x00cf, 0x00ee, 0x0401, 0x0201, 0x00df, 0x00ef, 0x0201, 0x00ff, 0x0201, 0x00ed,
        0x0201, 0x00fd, 0x0201, 0x00fc, 0x00fe,  //},g_huffman_table_15[511] = {
        0x1001, 0x0601, 0x0201, 0x0000, 0x0201, 0x0010, 0x0001, 0x0201, 0x0011, 0x0401, 0x0201,
        0x0020, 0x0002, 0x0201, 0x0021, 0x0012, 0x3201, 0x1001, 0x0601, 0x0201, 0x0022, 0x0201,
        0x0030, 0x0031, 0x0601, 0x0201, 0x0013, 0x0201, 0x0003, 0x0040, 0x0201, 0x0032, 0x0023,
        0x0e01, 0x0601, 0x0401, 0x0201, 0x0004, 0x0014, 0x0041, 0x0401, 0x0201, 0x0033, 0x0042,
        0x0201, 0x0024, 0x0043, 0x0a01, 0x0601, 0x0201, 0x0034, 0x0201, 0x0050, 0x0005, 0x0201,
        0x0051, 0x0015, 0x0401, 0x0201, 0x0052, 0x0025, 0x0401, 0x0201, 0x0044, 0x0053, 0x0061,
        0x5a01, 0x2401, 0x1201, 0x0a01, 0x0601, 0x0201, 0x0035, 0x0201, 0x0060, 0x0006, 0x0201,
        0x0016, 0x0062, 0x0401, 0x0201, 0x0026, 0x0054, 0x0201, 0x0045, 0x0063, 0x0a01, 0x0601,
        0x0201, 0x0036, 0x0201, 0x0070, 0x0007, 0x0201, 0x0071, 0x0055, 0x0401, 0x0201, 0x0017,
        0x0064, 0x0201, 0x0072, 0x0027, 0x1801, 0x1001, 0x0801, 0x0401, 0x0201, 0x0046, 0x0073,
        0x0201, 0x0037, 0x0065, 0x0401, 0x0201, 0x0056, 0x0080, 0x0201, 0x0008, 0x0074, 0x0401,
        0x0201, 0x0081, 0x0018, 0x0201, 0x0082, 0x0028, 0x1001, 0x0801, 0x0401, 0x0201, 0x0047,
        0x0066, 0x0201, 0x0083, 0x0038, 0x0401, 0x0201, 0x0075, 0x0057, 0x0201, 0x0084, 0x0048,
        0x0601, 0x0401, 0x0201, 0x0090, 0x0019, 0x0091, 0x0401, 0x0201, 0x0092, 0x0076, 0x0201,
        0x0067, 0x0029, 0x5c01, 0x2401, 0x1201, 0x0a01, 0x0401, 0x0201, 0x0085, 0x0058, 0x0401,
        0x0201, 0x0009, 0x0077, 0x0093, 0x0401, 0x0201, 0x0039, 0x0094, 0x0201, 0x0049, 0x0086,
        0x0a01, 0x0601, 0x0201, 0x0068, 0x0201, 0x00a0, 0x000a, 0x0201, 0x00a1, 0x001a, 0x0401,
        0x0201, 0x00a2, 0x002a, 0x0201, 0x0095, 0x0059, 0x1a01, 0x0e01, 0x0601, 0x0201, 0x00a3,
        0x0201, 0x003a, 0x0087, 0x0401, 0x0201, 0x0078, 0x00a4, 0x0201, 0x004a, 0x0096, 0x0601,
        0x0401, 0x0201, 0x0069, 0x00b0, 0x00b1, 0x0401, 0x0201, 0x001b, 0x00a5, 0x00b2, 0x0e01,
        0x0801, 0x0401, 0x0201, 0x005a, 0x002b, 0x0201, 0x0088, 0x0097, 0x0201, 0x00b3, 0x0201,
        0x0079, 0x003b, 0x0801, 0x0401, 0x0201, 0x006a, 0x00b4, 0x0201, 0x004b, 0x00c1, 0x0401,
        0x0201, 0x0098, 0x0089, 0x0201, 0x001c, 0x00b5, 0x5001, 0x2201, 0x1001, 0x0601, 0x0401,
        0x0201, 0x005b, 0x002c, 0x00c2, 0x0601, 0x0401, 0x0201, 0x000b, 0x00c0, 0x00a6, 0x0201,
        0x00a7, 0x007a, 0x0a01, 0x0401, 0x0201, 0x00c3, 0x003c, 0x0401, 0x0201, 0x000c, 0x0099,
        0x00b6, 0x0401, 0x0201, 0x006b, 0x00c4, 0x0201, 0x004c, 0x00a8, 0x1401, 0x0a01, 0x0401,
        0x0201, 0x008a, 0x00c5, 0x0401, 0x0201, 0x00d0, 0x005c, 0x00d1, 0x0401, 0x0201, 0x00b7,
        0x007b, 0x0201, 0x001d, 0x0201, 0x000d, 0x002d, 0x0c01, 0x0401, 0x0201, 0x00d2, 0x00d3,
        0x0401, 0x0201, 0x003d, 0x00c6, 0x0201, 0x006c, 0x00a9, 0x0601, 0x0401, 0x0201, 0x009a,
        0x00b8, 0x00d4, 0x0401, 0x0201, 0x008b, 0x004d, 0x0201, 0x00c7, 0x007c, 0x4401, 0x2201,
        0x1201, 0x0a01, 0x0401, 0x0201, 0x00d5, 0x005d, 0x0401, 0x0201, 0x00e0, 0x000e, 0x00e1,
        0x0401, 0x0201, 0x001e, 0x00e2, 0x0201, 0x00aa, 0x002e, 0x0801, 0x0401, 0x0201, 0x00b9,
        0x009b, 0x0201, 0x00e3, 0x00d6, 0x0401, 0x0201, 0x006d, 0x003e, 0x0201, 0x00c8, 0x008c,
        0x1001, 0x0801, 0x0401, 0x0201, 0x00e4, 0x004e, 0x0201, 0x00d7, 0x007d, 0x0401, 0x0201,
        0x00e5, 0x00ba, 0x0201, 0x00ab, 0x005e, 0x0801, 0x0401, 0x0201, 0x00c9, 0x009c, 0x0201,
        0x00f1, 0x001f, 0x0601, 0x0401, 0x0201, 0x00f0, 0x006e, 0x00f2, 0x0201, 0x002f, 0x00e6,
        0x2601, 0x1201, 0x0801, 0x0401, 0x0201, 0x00d8, 0x00f3, 0x0201, 0x003f, 0x00f4, 0x0601,
        0x0201, 0x004f, 0x0201, 0x008d, 0x00d9, 0x0201, 0x00bb, 0x00ca, 0x0801, 0x0401, 0x0201,
        0x00ac, 0x00e7, 0x0201, 0x007e, 0x00f5, 0x0801, 0x0401, 0x0201, 0x009d, 0x005f, 0x0201,
        0x00e8, 0x008e, 0x0201, 0x00f6, 0x00cb, 0x2201, 0x1201, 0x0a01, 0x0601, 0x0401, 0x0201,
        0x000f, 0x00ae, 0x006f, 0x0201, 0x00bc, 0x00da, 0x0401, 0x0201, 0x00ad, 0x00f7, 0x0201,
        0x007f, 0x00e9, 0x0801, 0x0401, 0x0201, 0x009e, 0x00cc, 0x0201, 0x00f8, 0x008f, 0x0401,
        0x0201, 0x00db, 0x00bd, 0x0201, 0x00ea, 0x00f9, 0x1001, 0x0801, 0x0401, 0x0201, 0x009f,
        0x00dc, 0x0201, 0x00cd, 0x00eb, 0x0401, 0x0201, 0x00be, 0x00fa, 0x0201, 0x00af, 0x00dd,
        0x0e01, 0x0601, 0x0401, 0x0201, 0x00ec, 0x00ce, 0x00fb, 0x0401, 0x0201, 0x00bf, 0x00ed,
        0x0201, 0x00de, 0x00fc, 0x0601, 0x0401, 0x0201, 0x00cf, 0x00fd, 0x00ee, 0x0401, 0x0201,
        0x00df, 0x00fe, 0x0201, 0x00ef, 0x00ff,  //},g_huffman_table_16[511] = {
        0x0201, 0x0000, 0x0601, 0x0201, 0x0010, 0x0201, 0x0001, 0x0011, 0x2a01, 0x0801, 0x0401,
        0x0201, 0x0020, 0x0002, 0x0201, 0x0021, 0x0012, 0x0a01, 0x0601, 0x0201, 0x0022, 0x0201,
        0x0030, 0x0003, 0x0201, 0x0031, 0x0013, 0x0a01, 0x0401, 0x0201, 0x0032, 0x0023, 0x0401,
        0x0201, 0x0040, 0x0004, 0x0041, 0x0601, 0x0201, 0x0014, 0x0201, 0x0033, 0x0042, 0x0401,
        0x0201, 0x0024, 0x0050, 0x0201, 0x0043, 0x0034, 0x8a01, 0x2801, 0x1001, 0x0601, 0x0401,
        0x0201, 0x0005, 0x0015, 0x0051, 0x0401, 0x0201, 0x0052, 0x0025, 0x0401, 0x0201, 0x0044,
        0x0035, 0x0053, 0x0a01, 0x0601, 0x0401, 0x0201, 0x0060, 0x0006, 0x0061, 0x0201, 0x0016,
        0x0062, 0x0801, 0x0401, 0x0201, 0x0026, 0x0054, 0x0201, 0x0045, 0x0063, 0x0401, 0x0201,
        0x0036, 0x0070, 0x0071, 0x2801, 0x1201, 0x0801, 0x0201, 0x0017, 0x0201, 0x0007, 0x0201,
        0x0055, 0x0064, 0x0401, 0x0201, 0x0072, 0x0027, 0x0401, 0x0201, 0x0046, 0x0065, 0x0073,
        0x0a01, 0x0601, 0x0201, 0x0037, 0x0201, 0x0056, 0x0008, 0x0201, 0x0080, 0x0081, 0x0601,
        0x0201, 0x0018, 0x0201, 0x0074, 0x0047, 0x0201, 0x0082, 0x0201, 0x0028, 0x0066, 0x1801,
        0x0e01, 0x0801, 0x0401, 0x0201, 0x0083, 0x0038, 0x0201, 0x0075, 0x0084, 0x0401, 0x0201,
        0x0048, 0x0090, 0x0091, 0x0601, 0x0201, 0x0019, 0x0201, 0x0009, 0x0076, 0x0201, 0x0092,
        0x0029, 0x0e01, 0x0801, 0x0401, 0x0201, 0x0085, 0x0058, 0x0201, 0x0093, 0x0039, 0x0401,
        0x0201, 0x00a0, 0x000a, 0x001a, 0x0801, 0x0201, 0x00a2, 0x0201, 0x0067, 0x0201, 0x0057,
        0x0049, 0x0601, 0x0201, 0x0094, 0x0201, 0x0077, 0x0086, 0x0201, 0x00a1, 0x0201, 0x0068,
        0x0095, 0xdc01, 0x7e01, 0x3201, 0x1a01, 0x0c01, 0x0601, 0x0201, 0x002a, 0x0201, 0x0059,
        0x003a, 0x0201, 0x00a3, 0x0201, 0x0087, 0x0078, 0x0801, 0x0401, 0x0201, 0x00a4, 0x004a,
        0x0201, 0x0096, 0x0069, 0x0401, 0x0201, 0x00b0, 0x000b, 0x00b1, 0x0a01, 0x0401, 0x0201,
        0x001b, 0x00b2, 0x0201, 0x002b, 0x0201, 0x00a5, 0x005a, 0x0601, 0x0201, 0x00b3, 0x0201,
        0x00a6, 0x006a, 0x0401, 0x0201, 0x00b4, 0x004b, 0x0201, 0x000c, 0x00c1, 0x1e01, 0x0e01,
        0x0601, 0x0401, 0x0201, 0x00b5, 0x00c2, 0x002c, 0x0401, 0x0201, 0x00a7, 0x00c3, 0x0201,
        0x006b, 0x00c4, 0x0801, 0x0201, 0x001d, 0x0401, 0x0201, 0x0088, 0x0097, 0x003b, 0x0401,
        0x0201, 0x00d1, 0x00d2, 0x0201, 0x002d, 0x00d3, 0x1201, 0x0601, 0x0401, 0x0201, 0x001e,
        0x002e, 0x00e2, 0x0601, 0x0401, 0x0201, 0x0079, 0x0098, 0x00c0, 0x0201, 0x001c, 0x0201,
        0x0089, 0x005b, 0x0e01, 0x0601, 0x0201, 0x003c, 0x0201, 0x007a, 0x00b6, 0x0401, 0x0201,
        0x004c, 0x0099, 0x0201, 0x00a8, 0x008a, 0x0601, 0x0201, 0x000d, 0x0201, 0x00c5, 0x005c,
        0x0401, 0x0201, 0x003d, 0x00c6, 0x0201, 0x006c, 0x009a, 0x5801, 0x5601, 0x2401, 0x1001,
        0x0801, 0x0401, 0x0201, 0x008b, 0x004d, 0x0201, 0x00c7, 0x007c, 0x0401, 0x0201, 0x00d5,
        0x005d, 0x0201, 0x00e0, 0x000e, 0x0801, 0x0201, 0x00e3, 0x0401, 0x0201, 0x00d0, 0x00b7,
        0x007b, 0x0601, 0x0401, 0x0201, 0x00a9, 0x00b8, 0x00d4, 0x0201, 0x00e1, 0x0201, 0x00aa,
        0x00b9, 0x1801, 0x0a01, 0x0601, 0x0401, 0x0201, 0x009b, 0x00d6, 0x006d, 0x0201, 0x003e,
        0x00c8, 0x0601, 0x0401, 0x0201, 0x008c, 0x00e4, 0x004e, 0x0401, 0x0201, 0x00d7, 0x00e5,
        0x0201, 0x00ba, 0x00ab, 0x0c01, 0x0401, 0x0201, 0x009c, 0x00e6, 0x0401, 0x0201, 0x006e,
        0x00d8, 0x0201, 0x008d, 0x00bb, 0x0801, 0x0401, 0x0201, 0x00e7, 0x009d, 0x0201, 0x00e8,
        0x008e, 0x0401, 0x0201, 0x00cb, 0x00bc, 0x009e, 0x00f1, 0x0201, 0x001f, 0x0201, 0x000f,
        0x002f, 0x4201, 0x3801, 0x0201, 0x00f2, 0x3401, 0x3201, 0x1401, 0x0801, 0x0201, 0x00bd,
        0x0201, 0x005e, 0x0201, 0x007d, 0x00c9, 0x0601, 0x0201, 0x00ca, 0x0201, 0x00ac, 0x007e,
        0x0401, 0x0201, 0x00da, 0x00ad, 0x00cc, 0x0a01, 0x0601, 0x0201, 0x00ae, 0x0201, 0x00db,
        0x00dc, 0x0201, 0x00cd, 0x00be, 0x0601, 0x0401, 0x0201, 0x00eb, 0x00ed, 0x00ee, 0x0601,
        0x0401, 0x0201, 0x00d9, 0x00ea, 0x00e9, 0x0201, 0x00de, 0x0401, 0x0201, 0x00dd, 0x00ec,
        0x00ce, 0x003f, 0x00f0, 0x0401, 0x0201, 0x00f3, 0x00f4, 0x0201, 0x004f, 0x0201, 0x00f5,
        0x005f, 0x0a01, 0x0201, 0x00ff, 0x0401, 0x0201, 0x00f6, 0x006f, 0x0201, 0x00f7, 0x007f,
        0x0c01, 0x0601, 0x0201, 0x008f, 0x0201, 0x00f8, 0x00f9, 0x0401, 0x0201, 0x009f, 0x00fa,
        0x00af, 0x0801, 0x0401, 0x0201, 0x00fb, 0x00bf, 0x0201, 0x00fc, 0x00cf, 0x0401, 0x0201,
        0x00fd, 0x00df, 0x0201, 0x00fe, 0x00ef,  //},g_huffman_table_24[512] = {
        0x3c01, 0x0801, 0x0401, 0x0201, 0x0000, 0x0010, 0x0201, 0x0001, 0x0011, 0x0e01, 0x0601,
        0x0401, 0x0201, 0x0020, 0x0002, 0x0021, 0x0201, 0x0012, 0x0201, 0x0022, 0x0201, 0x0030,
        0x0003, 0x0e01, 0x0401, 0x0201, 0x0031, 0x0013, 0x0401, 0x0201, 0x0032, 0x0023, 0x0401,
        0x0201, 0x0040, 0x0004, 0x0041, 0x0801, 0x0401, 0x0201, 0x0014, 0x0033, 0x0201, 0x0042,
        0x0024, 0x0601, 0x0401, 0x0201, 0x0043, 0x0034, 0x0051, 0x0601, 0x0401, 0x0201, 0x0050,
        0x0005, 0x0015, 0x0201, 0x0052, 0x0025, 0xfa01, 0x6201, 0x2201, 0x1201, 0x0a01, 0x0401,
        0x0201, 0x0044, 0x0053, 0x0201, 0x0035, 0x0201, 0x0060, 0x0006, 0x0401, 0x0201, 0x0061,
        0x0016, 0x0201, 0x0062, 0x0026, 0x0801, 0x0401, 0x0201, 0x0054, 0x0045, 0x0201, 0x0063,
        0x0036, 0x0401, 0x0201, 0x0071, 0x0055, 0x0201, 0x0064, 0x0046, 0x2001, 0x0e01, 0x0601,
        0x0201, 0x0072, 0x0201, 0x0027, 0x0037, 0x0201, 0x0073, 0x0401, 0x0201, 0x0070, 0x0007,
        0x0017, 0x0a01, 0x0401, 0x0201, 0x0065, 0x0056, 0x0401, 0x0201, 0x0080, 0x0008, 0x0081,
        0x0401, 0x0201, 0x0074, 0x0047, 0x0201, 0x0018, 0x0082, 0x1001, 0x0801, 0x0401, 0x0201,
        0x0028, 0x0066, 0x0201, 0x0083, 0x0038, 0x0401, 0x0201, 0x0075, 0x0057, 0x0201, 0x0084,
        0x0048, 0x0801, 0x0401, 0x0201, 0x0091, 0x0019, 0x0201, 0x0092, 0x0076, 0x0401, 0x0201,
        0x0067, 0x0029, 0x0201, 0x0085, 0x0058, 0x5c01, 0x2201, 0x1001, 0x0801, 0x0401, 0x0201,
        0x0093, 0x0039, 0x0201, 0x0094, 0x0049, 0x0401, 0x0201, 0x0077, 0x0086, 0x0201, 0x0068,
        0x00a1, 0x0801, 0x0401, 0x0201, 0x00a2, 0x002a, 0x0201, 0x0095, 0x0059, 0x0401, 0x0201,
        0x00a3, 0x003a, 0x0201, 0x0087, 0x0201, 0x0078, 0x004a, 0x1601, 0x0c01, 0x0401, 0x0201,
        0x00a4, 0x0096, 0x0401, 0x0201, 0x0069, 0x00b1, 0x0201, 0x001b, 0x00a5, 0x0601, 0x0201,
        0x00b2, 0x0201, 0x005a, 0x002b, 0x0201, 0x0088, 0x00b3, 0x1001, 0x0a01, 0x0601, 0x0201,
        0x0090, 0x0201, 0x0009, 0x00a0, 0x0201, 0x0097, 0x0079, 0x0401, 0x0201, 0x00a6, 0x006a,
        0x00b4, 0x0c01, 0x0601, 0x0201, 0x001a, 0x0201, 0x000a, 0x00b0, 0x0201, 0x003b, 0x0201,
        0x000b, 0x00c0, 0x0401, 0x0201, 0x004b, 0x00c1, 0x0201, 0x0098, 0x0089, 0x4301, 0x2201,
        0x1001, 0x0801, 0x0401, 0x0201, 0x001c, 0x00b5, 0x0201, 0x005b, 0x00c2, 0x0401, 0x0201,
        0x002c, 0x00a7, 0x0201, 0x007a, 0x00c3, 0x0a01, 0x0601, 0x0201, 0x003c, 0x0201, 0x000c,
        0x00d0, 0x0201, 0x00b6, 0x006b, 0x0401, 0x0201, 0x00c4, 0x004c, 0x0201, 0x0099, 0x00a8,
        0x1001, 0x0801, 0x0401, 0x0201, 0x008a, 0x00c5, 0x0201, 0x005c, 0x00d1, 0x0401, 0x0201,
        0x00b7, 0x007b, 0x0201, 0x001d, 0x00d2, 0x0901, 0x0401, 0x0201, 0x002d, 0x00d3, 0x0201,
        0x003d, 0x00c6, 0x55fa, 0x0401, 0x0201, 0x006c, 0x00a9, 0x0201, 0x009a, 0x00d4, 0x2001,
        0x1001, 0x0801, 0x0401, 0x0201, 0x00b8, 0x008b, 0x0201, 0x004d, 0x00c7, 0x0401, 0x0201,
        0x007c, 0x00d5, 0x0201, 0x005d, 0x00e1, 0x0801, 0x0401, 0x0201, 0x001e, 0x00e2, 0x0201,
        0x00aa, 0x00b9, 0x0401, 0x0201, 0x009b, 0x00e3, 0x0201, 0x00d6, 0x006d, 0x1401, 0x0a01,
        0x0601, 0x0201, 0x003e, 0x0201, 0x002e, 0x004e, 0x0201, 0x00c8, 0x008c, 0x0401, 0x0201,
        0x00e4, 0x00d7, 0x0401, 0x0201, 0x007d, 0x00ab, 0x00e5, 0x0a01, 0x0401, 0x0201, 0x00ba,
        0x005e, 0x0201, 0x00c9, 0x0201, 0x009c, 0x006e, 0x0801, 0x0201, 0x00e6, 0x0201, 0x000d,
        0x0201, 0x00e0, 0x000e, 0x0401, 0x0201, 0x00d8, 0x008d, 0x0201, 0x00bb, 0x00ca, 0x4a01,
        0x0201, 0x00ff, 0x4001, 0x3a01, 0x2001, 0x1001, 0x0801, 0x0401, 0x0201, 0x00ac, 0x00e7,
        0x0201, 0x007e, 0x00d9, 0x0401, 0x0201, 0x009d, 0x00e8, 0x0201, 0x008e, 0x00cb, 0x0801,
        0x0401, 0x0201, 0x00bc, 0x00da, 0x0201, 0x00ad, 0x00e9, 0x0401, 0x0201, 0x009e, 0x00cc,
        0x0201, 0x00db, 0x00bd, 0x1001, 0x0801, 0x0401, 0x0201, 0x00ea, 0x00ae, 0x0201, 0x00dc,
        0x00cd, 0x0401, 0x0201, 0x00eb, 0x00be, 0x0201, 0x00dd, 0x00ec, 0x0801, 0x0401, 0x0201,
        0x00ce, 0x00ed, 0x0201, 0x00de, 0x00ee, 0x000f, 0x0401, 0x0201, 0x00f0, 0x001f, 0x00f1,
        0x0401, 0x0201, 0x00f2, 0x002f, 0x0201, 0x00f3, 0x003f, 0x1201, 0x0801, 0x0401, 0x0201,
        0x00f4, 0x004f, 0x0201, 0x00f5, 0x005f, 0x0401, 0x0201, 0x00f6, 0x006f, 0x0201, 0x00f7,
        0x0201, 0x007f, 0x008f, 0x0a01, 0x0401, 0x0201, 0x00f8, 0x00f9, 0x0401, 0x0201, 0x009f,
        0x00af, 0x00fa, 0x0801, 0x0401, 0x0201, 0x00fb, 0x00bf, 0x0201, 0x00fc, 0x00cf, 0x0401,
        0x0201, 0x00fd, 0x00df, 0x0201, 0x00fe, 0x00ef,  //},g_huffman_table_32[31] = {
        0x0201, 0x0000, 0x0801, 0x0401, 0x0201, 0x0008, 0x0004, 0x0201, 0x0001, 0x0002, 0x0801,
        0x0401, 0x0201, 0x000c, 0x000a, 0x0201, 0x0003, 0x0006, 0x0601, 0x0201, 0x0009, 0x0201,
        0x0005, 0x0007, 0x0401, 0x0201, 0x000e, 0x000d, 0x0201, 0x000f, 0x000b,  //},g_huffman_table_33[31] = {
        0x1001, 0x0801, 0x0401, 0x0201, 0x0000, 0x0001, 0x0201, 0x0002, 0x0003, 0x0401, 0x0201,
        0x0004, 0x0005, 0x0201, 0x0006, 0x0007, 0x0801, 0x0401, 0x0201, 0x0008, 0x0009, 0x0201,
        0x000a, 0x000b, 0x0401, 0x0201, 0x000c, 0x000d, 0x0201, 0x000e, 0x000f
    )
    val HUFFMAN_TABLE_OFFSET_LAYER_III: IntArray = intArrayOf(Short.MIN_VALUE.toInt(),0,7,24,Short.MIN_VALUE.toInt(),41,72,103,174,245,316,443,570,697,Short.MIN_VALUE.toInt(),1208,1719,1719,1719,1719,1719,1719,1719,1719,2230,2230,2230,2230,2230,2230,2230,2230,2742,2261)
    val HUFFMAN_TREELEN_LAYER_III: IntArray = intArrayOf(0,7,17,17,0,31,31,71,71,71,127,127,127,511,0,511,511,511,511,511,511,511,511,511,512,512,512,512,512,512,512,512,31,31)
    val HUFFMAN_LINBITS_LAYER_III: IntArray = intArrayOf(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 8, 10, 13, 4, 5, 6, 7, 8, 9, 11, 13, 0, 0)
    val REQUANTIZE_LONG_PRETAB_LAYER_III: FloatArray = floatArrayOf(0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f, 1f, 1f, 1f, 1f, 2f, 2f, 3f, 3f, 3f, 2f)
    val COS_12_LAYER_III: FloatArray = FloatArray(6 * 12).also { COS_12_LAYER_III ->
        for (i in 0..5) for (j in 0..11) COS_12_LAYER_III[i * 12 + j] = cos((PI / (2 * 12)) * ((2.0 * j) + 1 + (12 / 2)) * (2.0 * i + 1)).toFloat()
    }
    val COS_36_LAYER_III: FloatArray = FloatArray(18 * 36).also { COS_36_LAYER_III ->
        for (i in 0..17) for (j in 0..35) COS_36_LAYER_III[i * 36 + j] = cos((PI / (2 * 36)) * ((2.0 * j) + 1 + (36 / 2)) * (2.0 * i + 1)).toFloat()
    }

    private fun pow(b: Double, e: Double): Double {
        return b.pow(e)
    }
}
