package korlibs.wasm

import korlibs.encoding.*
import korlibs.io.compression.*
import korlibs.io.compression.deflate.*
import korlibs.io.lang.*

// https://github.com/evanw/polywasm/tree/main/src
// esbuild --bundle index.ts --minify --format=esm | ~/go/bin/zlib | base64
val WASMJSPolyfill: String by lazy {
    ""
        .fromBase64()
        .uncompress(ZLib)
        .toString(UTF8)
}

/*
<html>
<body>
<script type="module">
    // From a file:
    //import { WebAssembly as wasmAPI } from './out.js'
    //
    // or from bytes:
    const outJsBytes = await (await fetch("out.js")).arrayBuffer()
    const url = URL.createObjectURL(new Blob([outJsBytes], { type: "text/javascript" }))
    const imported = await import(url)
    const wasmAPI = imported.WebAssembly

    const rest = await fetch("webp.wasm")
    const bytes = await rest.arrayBuffer()
    const dummyFunc = () => { throw new Error() }
    const imports = {
        env: {
            abort: dummyFunc,
        },
        wasi_snapshot_preview1: {
            proc_exit: dummyFunc,
            fd_close: dummyFunc,
            fd_write: dummyFunc,
            fd_seek: dummyFunc,
        }
    }
    const module = new wasmAPI.Module(bytes)
    const exports = new wasmAPI.Instance(module, imports).exports
    console.log(bytes)
    console.log(exports)

</script>
</body>
</html>
 */
